(function() {
  this.widget_collection = {
    pipedent: {
      description: "PipeDent",
      code: 'HTML\n  <hr>\n  table\n    tr\n      td\n        h2 | About Pipedent\n        h4 | small subset of HAML/Jade\n        h4 | use it as a preprocessor\n        h4 | just requires one file to run\n        h4 | source code is annotated\n      td\n        h2 | Syntax\n        h4 | Use indentation for blocks\n        h4 | Use "|" to separate markup from content\n        h4 | Use "|" to auto-close single-line tags\n        h4 | Inline HTML passes through fine.\n  <hr>\n    a href="https://github.com/showell/PipeDent/blob/master/pipedent.coffee" | Github\nCSS\n  h4 {\n    font-weight: normal;\n  }\n  td {\n    padding: 10px;\n  }'
    },
    basic_tables: {
      description: "Basic Tables",
      code: 'HTML\n  div id="TableWidget"\n    <hr>\n    h6 | Simple tables\n    table border=1\n      tr\n        td class="NW"\n          Northwest\n        td class="NE"\n          Northeast\n      tr\n        td class="SW"\n          Southwest\n        td class="SE"\n          Southeast\nCSS\n  .NW {\n    background: red\n  }\n  .SE {\n    background: lightblue\n  }\nCOFFEE\n  Widget = (elem) ->\n    set_color = (elem, color) ->\n      elem.css("background", color)\n    NW: (color) -> set_color $(".NW"), color\n    NE: (color) -> set_color $(".NE"), color\n    SW: (color) -> set_color $(".SW"), color\n    SE: (color) -> set_color $(".SE"), color\n  this.widget = Widget $("#TableWidget")'
    },
    complex_numbers: {
      description: "Basic Graphics",
      code: 'HTML\n  table\n    tr valign="top"\n      td\n        canvas id="ComplexNumbers" |\n      td\n        div id="ButtonPanel"\n          button id="rotate_plus10" | Rotate 10 counterclockwise\n          button id="rotate_minus10" | Rotate 10 clockwise\n          button id="reflect_x" | Reflect across x-axis\n          button id="reflect_y" | Reflect across y-axis\n          button id="reflect_origin" | Reflect across origin\n          button id="expand" | Expand\n          button id="compress" | Compress\nCSS\n  #ComplexNumbers {\n    width: 300px;\n    height: 300px;\n    border: 3px blue solid\n  }\n  \nCOFFEE\n  ButtonPanel = (shape, div) ->\n    div.find("#rotate_plus10").click -> shape.rotate(10)\n    div.find("#rotate_minus10").click -> shape.rotate(-10)\n    div.find("#reflect_x").click -> shape.reflect_x()\n    div.find("#reflect_y").click -> shape.reflect_y()\n    div.find("#reflect_origin").click -> shape.reflect_origin()\n    div.find("#expand").click -> shape.rescale(1.2)\n    div.find("#compress").click -> shape.rescale(0.8)\n      \n  Shape = (canvas, coords) ->\n    cp = ComplexPlane(canvas)\n    cp.draw_shape(coords)\n    rescale = (coord, scaling) ->\n      coord.times_real(scaling)\n    reflect_origin = (coord) ->\n      rescale coord, -1\n    reflect_x = (coord) ->\n      coord.conjugate()\n    reflect_y = (coord) ->\n      reflect_x reflect_origin(coord)\n    self =\n      transform: (f) ->\n        coords = coords.map (coord) -> f(coord)\n        cp.draw_shape(coords)\n      reflect_origin: ->\n        self.transform reflect_origin\n      reflect_x: -> \n        self.transform reflect_x\n      reflect_y: -> \n        self.transform reflect_y\n      move: (x, y) ->\n        self.transform (coord) -> coord.plus Complex(x,y)\n      rescale: (scaling) ->\n        self.transform (coord) -> rescale coord, scaling\n      coords: -> coords\n      rotate: (angle) ->\n        radians = 2 * Math.PI * angle / 360\n        other = Complex Math.cos(radians), Math.sin(radians)\n        self.transform (coord) -> coord.times(other) \n\n  Complex = (a, b) ->\n    a: a\n    b: b\n    conjugate: -> Complex(a, -b)\n    times: (other) -> Complex(a * other.a - b * other.b, a * other.b + b * other.a)\n    times_real: (real) -> Complex(a * real, b * real)\n    plus: (other) -> Complex(a + other.a, b + other.b)\n    toString: -> "#{a} + #{b}i"\n    magnitude: -> a*a + b*b\n\n  ComplexPlane = (canvas) ->\n    ctx = canvas.getContext("2d")\n    ctx.lineWidth = 2;\n    ctx.scale(1, 0.5)\n    draw_axes = ->\n      ctx.moveTo(0, 150)\n      ctx.lineTo(300, 150)\n      ctx.moveTo(150, 0)\n      ctx.lineTo(150, 300)\n      ctx.stroke()\n    x = (c) ->\n      Math.floor(c.a) + 150\n    y = (c) ->\n      150 - Math.floor(c.b)\n    move = (c) ->\n      ctx.moveTo x(c), y(c)\n    line = (c) ->\n      ctx.lineTo x(c), y(c)\n    self =\n      draw_shape: (shape) ->\n        self.reset()\n        ctx.strokeStyle = "red"\n        ctx.beginPath()\n        move(shape[shape.length-1])\n        for point in shape\n          line(point)\n        ctx.stroke()\n      reset: ->\n        canvas.width = canvas.width\n        ctx.scale(1, 0.5)\n        draw_axes()\n  \n  canvas = $("#ComplexNumbers").get()[0]\n  house = [Complex(10, 10), Complex(10, 40), Complex(25, 60), Complex(40, 40), Complex(40, 10)]\n  this.shape = Shape(canvas, house)\n  this.button_panel = ButtonPanel(shape, $("#ButtonPanel"))\n  this.Complex = Complex'
    },
    keyboard_cat: {
      description: "Keyboard Cat!",
      code: 'HTML\n  iframe id="cat" src="http://bit.ly/rnRblF" allowfullscreen |\nCSS\n  #cat {\n    width: 425;\n    height: 349;\n  }'
    }
  };
}).call(this);
